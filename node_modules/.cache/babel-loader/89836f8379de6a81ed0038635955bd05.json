{"ast":null,"code":"import _objectSpread from \"/home/danjela/myblog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/danjela/myblog/src/containers/MainContainer.js\";\nimport React from 'react';\nimport ToDoCard from '../components/ToDoCard';\nimport CreateCard from '../components/CreateCard';\nimport ToDoCardContainer from './ToDoCardContainer';\nexport default class MainContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: []\n    };\n\n    this.createNewCard = input => {\n      fetch(\"http://localhost:3000/cards\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          title: input\n        })\n      }).then(resp => resp.json()).then(newCard => {\n        this.setState({\n          cards: [...this.state.cards, newCard]\n        });\n      });\n    };\n\n    this.addList = (cardId, input) => {\n      fetch(\"http://localhost:3000/lists\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          description: input,\n          card_id: cardId,\n          completed: false\n        })\n      }).then(resp => resp.json()).then(newList => {\n        const foundCard = _objectSpread({}, this.state.cards.find(card => card.id === cardId));\n\n        foundCard.lists = [...foundCard.lists, newList];\n        const newCards = this.state.cards.map(card => {\n          if (card.id === cardId) {\n            return foundCard;\n          } else {\n            return card;\n          }\n        });\n        this.setState({\n          cards: newCards\n        });\n      });\n    };\n\n    this.handleClickList = (cardId, listId) => {\n      const foundCard = _objectSpread({}, this.state.cards.find(card => card.id === cardId));\n\n      const foundList = foundCard.lists.find(list => list.id === listId);\n      let newState = null;\n\n      if (foundList.completed) {\n        newState = false;\n      } else {\n        newState = true;\n      }\n\n      fetch(\"http://localhost:3000/lists/\".concat(listId), {\n        method: \"PATCH\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          completed: newState\n        })\n      }).then(resp => resp.json()).then(newList => {\n        const newLists = foundCard.lists.map(list => {\n          if (list.id === listId) {\n            return newList;\n          } else {\n            return list;\n          }\n        });\n        foundCard.lists = newLists;\n        const newCards = this.state.cards.map(card => {\n          if (card.id === cardId) {\n            return foundCard;\n          } else {\n            return card;\n          }\n        });\n        this.setState({\n          cards: newCards\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/cards\").then(resp => resp.json()).then(cards => {\n      this.setState({\n        cards: cards\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(ToDoCardContainer, {\n      cards: this.state.cards,\n      addList: this.addList,\n      handleClickList: this.handleClickList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(CreateCard, {\n      createNewCard: this.createNewCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/danjela/myblog/src/containers/MainContainer.js"],"names":["React","ToDoCard","CreateCard","ToDoCardContainer","MainContainer","Component","state","cards","createNewCard","input","fetch","method","headers","Accept","body","JSON","stringify","title","then","resp","json","newCard","setState","addList","cardId","description","card_id","completed","newList","foundCard","find","card","id","lists","newCards","map","handleClickList","listId","foundList","list","newState","newLists","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ToDoCard from '../components/ToDoCard'\nimport CreateCard from '../components/CreateCard'\nimport ToDoCardContainer from './ToDoCardContainer'\n\n\nexport default class MainContainer extends React.Component {\n\n  state = {\n    cards: []\n  }\n\n  componentDidMount(){\n    fetch(\"http://localhost:3000/cards\")\n    .then(resp => resp.json())\n    .then(cards => {\n      this.setState({\n        cards: cards\n      })\n    })\n  }\n\n  createNewCard = (input) => {\n    fetch(\"http://localhost:3000/cards\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        title: input\n      })\n    })\n    .then(resp => resp.json())\n    .then(newCard => {\n      this.setState({\n        cards: [...this.state.cards, newCard]\n      })\n    })\n  }\n\n  addList = (cardId, input) => {\n    fetch(\"http://localhost:3000/lists\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        description: input,\n        card_id: cardId,\n        completed: false\n      })\n    })\n    .then(resp => resp.json())\n    .then(newList => {\n      const foundCard = {...this.state.cards.find(card => card.id === cardId)}\n      foundCard.lists = [...foundCard.lists, newList]\n\n      const newCards = this.state.cards.map(card => {\n        if (card.id === cardId){\n          return foundCard\n        } else {\n          return card\n        }\n      })\n\n      this.setState({\n        cards: newCards\n      })\n\n    })\n  }\n\n  handleClickList = (cardId, listId) => {\n\n    const foundCard = {...this.state.cards.find(card => card.id === cardId)}\n    const foundList = foundCard.lists.find(list => list.id === listId)\n\n    let newState = null\n\n    if (foundList.completed) {\n      newState = false\n    } else {\n      newState = true\n    }\n\n    fetch(`http://localhost:3000/lists/${listId}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        completed: newState\n      })\n    })\n    .then(resp => resp.json())\n    .then(newList => {\n\n      const newLists = foundCard.lists.map(list => {\n        if (list.id === listId){\n          return newList\n        } else {\n          return list\n        }\n      })\n      foundCard.lists = newLists\n\n\n      const newCards = this.state.cards.map(card => {\n        if (card.id === cardId) {\n          return foundCard\n        } else {\n          return card\n        }\n      })\n\n      this.setState({\n        cards: newCards\n      })\n    })\n  }\n\n\n  render(){\n    return (\n      <div className=\"main-container\">\n        <ToDoCardContainer cards={this.state.cards} addList={this.addList} handleClickList={this.handleClickList}/>\n        <CreateCard createNewCard={this.createNewCard}/>\n      </div>\n    )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}